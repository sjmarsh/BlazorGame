@using Models;

@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage;
@inject IJSRuntime jsRuntime;

<div>
    @if (DisplayMode == HighScoresDisplayMode.Button)
    {
        <div class="high-scores-button" @onclick="ShowHighScores">
            <p>High Scores</p>
        </div>
    }
    else if (DisplayMode == HighScoresDisplayMode.Show)
    {
        <div class="high-scores">
            <h1>High Scores</h1>
            <button class="high-scores-close-button" @onclick="HideHighScores">X</button>
            <div hidden="@NewScoreEntryIsHidden()">
                <p>Enter Your Name:</p>
                <input id="playerNameInput" type="text" maxlength="15" @bind="playerName" @onkeyup="HandleKeyUp" @onkeyup:stopPropagation />
            </div>
            <table class="high-scores-table">
                <thead>
                    <tr>
                        <th>Player</th>
                        <th>Stage</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var score in highScores)
                    {
                        <tr>
                            <td>@score.PlayerName</td>
                            <td>@score.Stage</td>
                            <td>@score.Score</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

</div>

@code {

    [Parameter]
    public HighScoresDisplayMode DisplayMode { get; set; }

    [Parameter]
    public int CurrentScore { get; set; }

    [Parameter]
    public int CurrentStage { get; set; }

    private const int MaxHighScoreCount = 10;

    private List<ScoreModel> highScores;
    private bool hidePlayerNameEntry;
    private string playerName;

    IJSObjectReference module;

    protected override void OnInitialized()
    {
        DisplayMode = HighScoresDisplayMode.Button;
        highScores = localStorage.GetItem<List<ScoreModel>>("highscores") ?? new List<ScoreModel>();
    }

    private async void ShowHighScores()
    {
        hidePlayerNameEntry = false;
        DisplayMode = HighScoresDisplayMode.Show;
        module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeAsync<string>("setFocus", "playerNameInput");
    }

    private void HideHighScores()
    {
        DisplayMode = HighScoresDisplayMode.Button;
    }

    private bool NewScoreEntryIsHidden()
    {
        return  IsCurrentScoreTooLow() 
            || IsCurrentScoreAlreadyEntered()
            || CurrentScore == 0
            || hidePlayerNameEntry;
    }

    private bool IsCurrentScoreTooLow()
    {
        var scores = highScores.Select(h => h.Score).ToArray();
        return scores.Any() && CurrentScore <= scores.Min() && scores.Count() > MaxHighScoreCount;
    }

    private bool IsCurrentScoreAlreadyEntered()
    {
        return highScores.Any(h => h.Score == CurrentScore && h.Stage == CurrentStage && h.ScoreDate.Date == DateTime.Today.Date);
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddNewHighScore();
        }
    }

    private void AddNewHighScore()
    {
        if(!string.IsNullOrWhiteSpace(playerName))
        {
            if (highScores.Count >= MaxHighScoreCount)
            {
                highScores.RemoveAt(MaxHighScoreCount - 1);
            }
            highScores.Add(new ScoreModel { PlayerName = playerName, Score = CurrentScore, Stage = CurrentStage, ScoreDate = DateTime.Now });
            highScores = highScores.OrderByDescending(h => h.Score).ToList();
            hidePlayerNameEntry = true;
            playerName = string.Empty;
            localStorage.SetItem<List<ScoreModel>>("highscores", highScores);
        }
    }
}