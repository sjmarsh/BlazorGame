@using BlazorGame.Models

@if (game == null)
{
    <em>Loading...</em>
}
else
{
    <div class="game-area" tabindex="0"  @onkeyup="HandleKeyUp">
        <div class="fog" hidden="@hideFog"></div>
        
        <div class="message-area">
            <Dialog DisplayMode="@GetDialogDisplayMode()" OnClickAction="game.StartStopGame" />
            <HighScores DisplayMode="@GetHighScoresDisplayMode()" CurrentScore="game.Stats.Score" CurrentStage="game.Stats.StageNumber" />
            <Checkpoint Hidden="@hideCheckpoint" StageManager="game.StageManager"></Checkpoint>
        </div>                
        <Stats Model="@game.Stats"/>
        <div class="sky @skyCss" style="@GetBrightnessFilter(game)"></div>
        <div class="ground @groundCss">
            <Scenery Manager="game.SceneryManager"></Scenery>
            <div class="@roadCss">
                <MedianStrip Manager="game.MedianStripManager"></MedianStrip>
                <AICars Manager="game.AICarManager" StageManager="game.StageManager"></AICars>
                <PlayerCar Model="game.PlayerCar" StageManager="game.StageManager" />
            </div>
        </div>
        <GameControls MoveLeftAction="MoveLeft" MoveRightAction="MoveRight" />
    </div>
}

@code {

    [Inject]
    GameModel game { get; set; }

    private string skyCss => $"sky-{game.StageManager.CurrentStage.Name}";
    private string groundCss => $"ground-{game.StageManager.CurrentStage.Name}";
    private string roadCss => "road " + (game.StageManager.CurrentStage.IsNightTime ? "road-night" : "");
    private bool hideFog => !game.StageManager.CurrentStage.ShowFog;
    private bool hideCheckpoint => !game.StageManager.ShowCheckpoint;

    protected override async Task OnInitializedAsync()
    {
        await game.ResetGame();
        game.MainLoopCompleted += (o, e) => StateHasChanged();
    }

    private DialogDisplayMode GetDialogDisplayMode()
    {
        var mode = DialogDisplayMode.Hide;
        if(game != null)
        {
            if (!game.IsRunning && !game.IsComplete && !game.PlayerCar.HasCollision)
            {
                mode = DialogDisplayMode.Start;
            }
            else if (game.PlayerCar.HasCollision)
            {
                mode = DialogDisplayMode.GameOver;
            }
            else if (game.IsComplete)
            {
                mode = DialogDisplayMode.Complete;
            }
        }

        return mode;
    }

    private HighScoresDisplayMode GetHighScoresDisplayMode()
    {
        return game != null && game.IsRunning ? HighScoresDisplayMode.Hide : HighScoresDisplayMode.Button;
    }

    private string GetBrightnessFilter(GameModel game){
        if (!game.StageManager.CurrentStage.BrightnessOffset.HasValue)
        {
            return "";
        }
        var brightness = 1.0;
        brightness += (double)game.Stats.TimePlayed.Seconds / game.Stats.StageNumber / 60 * game.StageManager.CurrentStage.BrightnessOffset.Value;
        Console.WriteLine(brightness);
        return $"filter:brightness({brightness})";
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if(game != null)
        {
            if (game.IsRunning)
            {
                if (e.Key == "ArrowLeft")
                {
                    MoveLeft();
                }

                if (e.Key == "ArrowRight")
                {
                    MoveRight();
                }

                if (e.Key == "C" || e.Key == "c")
                {
                    game.ToggleCollisionsEnabled();
                }
            }
            if (e.Key == " ")
            {
                await game.StartStopGame();
            }
        }    
    }

    private void MoveLeft()
    {
        game!.MovePlayerCarLeft();
    }

    private void MoveRight()
    {
        game!.MovePlayerCarRight();
    }
}